[%- FOREACH param_name IN shape.members.keys.sort -%]
  [%- traits = [] -%]
  [%- member_shape_name = shape.members.$param_name.shape -%]
  [%- member = c.shape(member_shape_name) -%]
  has [%- param_name -%] => (is => 'ro', isa => '[%- member.perl_type -%]'
  [%- IF (member.type == 'list' and shape.members.$param_name.locationName.defined) -%][%- traits.push('NameInRequest') -%], request_name => '[%- shape.members.$param_name.locationName -%]'
  [%- ELSIF (member.type == 'list' and member.member.locationName.defined and member.member.shape != 'String') -%][%- traits.push('NameInRequest') -%], request_name => '[%- member.member.locationName -%]'
  [%- ELSIF (shape.members.$param_name.location == 'header') -%], header_name => '[%- shape.members.$param_name.locationName -%]'
    [%- IF (param_name == 'ContentMD5'); traits.push('AutoInHeader') -%], auto => 'MD5'
    [%- ELSE; traits.push('ParamInHeader') -%]
    [%- END -%]
  [%- ELSIF (shape.members.$param_name.location == 'headers');     traits.push('ParamInHeaders') -%], header_prefix => '[%- shape.members.$param_name.locationName -%]'
  [%- ELSIF (shape.members.$param_name.location == 'querystring'); traits.push('ParamInQuery') -%], query_name => '[%- shape.members.$param_name.locationName -%]'
  [%- ELSIF (shape.members.$param_name.location == 'uri');         traits.push('ParamInURI') -%], uri_name => '[%- shape.members.$param_name.locationName -%]'
  [%- ELSIF (shape.members.$param_name.locationName != '') -%]
    [%- IF (shape.members.$param_name.locationName == 'x-amz-meta-') -%]
    [%- ELSIF (shape.members.$param_name.locationName != param_name); traits.push('NameInRequest'); -%], request_name => '[%- shape.members.$param_name.locationName -%]'
    [%- END -%]
  [%- END -%]
  [%- IF (shape.members.$param_name.streaming == 1 || member.streaming == 1); traits.push('ParamInBody'); include_vars.stream_param = param_name; -%]
  [%- ELSIF shape.payload == param_name; traits.push('ParamInBody'); END -%]
  [%- IF source =='object' -%]
    [%- encoder = c.encoders_struct.$member_shape_name; IF (encoder); traits.push('JSONAttribute') -%], decode_as => '[%- encoder.encoding -%]', method => '[%- encoder.alias -%]'[%- END -%]
    [%- IF (member.members.xmlname and (member.members.xmlname != 'item')) -%], traits => ['NameInRequest'], request_name => '[%- member.members.xmlname -%]'[%- END -%]
  [%- END -%]
  [%- IF (traits.size) -%], traits => [[%- FOREACH trait=traits -%]'[%- trait -%]'[%- ',' IF (NOT loop.last) -%][%- END -%]][%- END -%]
    [%- IF (c.required_in_shape(shape,param_name)) -%], required => 1[%- END -%]);

[%- END %]
